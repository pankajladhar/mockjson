{
  "title": "Reverse the digits",
  "duration": 120,
  "durationUnit": "minutes",
  "description": "Given a 32-bit signed integer, reverse digits of an integer.",
  "notes": "Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.",
  "assertions": [
    "Test.assertEquals(reverse(12), 0);",
    "Test.assertEquals(reverse(12345), 0);",
    "Test.assertEquals(reverse(-1234), 2);",
    "Test.assertEquals(reverse(00123), 2,'should zero');",
    "Test.assertEquals(reverse(-103000), 1)",
    "Test.assertEquals(reverse(8e3), 1)",
    "Test.assertEquals(reverse(004500), 2, 'should ignore adjesent zeros')"
  ],
  "functionName": "reverse",
  "testCases": [
    {
      "inputs": [
        123
      ],
      "output": 321,
      "failureMsg": "Should reverse the digits"
    },
    {
      "inputs": [
        -123
      ],
      "output": -321,
      "failureMsg": "Should reverse the negative digits"
    },
    {
      "inputs": [
        120
      ],
      "output": 21,
      "failureMsg": "Should ignore the trailing zero"
    }
  ],
  "rules": [
    "should be reusable",
    "minimal code",
    "consider cyclomatic complexity"
  ],
  "examples": [
    [
      "reverse(123)",
      321,
      "# positive number reversing"
    ],
    [
      "reverse(-123)",
      -321,
      "# negative number"
    ],
    [
      "reverse(120)",
      21,
      "# removes trailing zeo"
    ]
  ],
  "scaffoldCode": "const reverse = (input) => {\n\t// code goes here\n}",
  "maxTries": 3,
  "language": "js"
}
